{
    "game": {
        "single": [
            {
                "category": "Compute the Value",
                "clues": [
                    {
                        "value": 200,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let f x = x + 1 in</li><li>f (f 8) ;;</li></ul>",
                        "solution": "What is <span class='code'>10</span>?"
                    },
                    {
                        "value": 400,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let lst = [1; 2; 3; 4] in</li><li>match lst with</li><li>| [] -> lst</li><li>| hd :: tl -> tl ;;</li></ul>",
                        "solution": "What is <span class='code'>[2; 3; 4]</span>?"
                    },
                    {
                        "value": 600,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let f x y = x + y in</li><li>let g = f 20 in</li><li>g 8 ;;</li></ul>",
                        "solution": "What is <span class='code'>28</span>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let f x y z = y x in</li><li>f 3 ((+) 4) ((+) 5) ;;</li></ul>",
                        "solution": "What is <span class='code'>7</span>?"
                    },
                    {
                        "value": 1000,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let x = 2 in</li><li>let y = 3 in</li><li>let f x y = x in</li><li>f y x ;;</li></ul>",
                        "solution": "What is <span class='code'>3</span>?"
                    }
                ]
            },
            {
                "category": "Lists",
                "clues": [
                    {
                        "value": 200,
                        "html": true,
                        "clue": "The two parts of a non-empty list.",
                        "solution": "What are head and tail?"
                    },
                    {
                        "value": 400,
                        "html": true,
                        "clue": "In the expression <span class='code'>x :: y</span>, if <span class='code'>x</span> is a <span class='code'>float</span>, then this must be type for <span class='code'>y</span>.",
                        "solution": "What is <span class='code'>float list</span>?"
                    },
                    {
                        "value": 600,
                        "html": true,
                        "clue": "The type of the following list. <div class='code'>[Some (2, 8); None; Some (5, 1)]</div>",
                        "solution": "What is <span class='code'>(int * int) option list</span>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "dailyDouble": true,
                        "clue": "The type of <span class='code'>List.length</span>",
                        "solution": "What is <span class='code'>'a list -> int</span>?"
                    },
                    {
                        "value": 1000,
                        "html": true,
                        "clue": "The type of <span class='code'>List.map</span>",
                        "solution": "What is <span class='code'>('a -> 'b) -> 'a list -> 'b list</span>?"
                    }
                ]
            },
            {
                "category": "Type Inference",
                "clues": [
                    {
                        "value": 200,
                        "html": true,
                        "clue": "<span class='code'>3.0 -. 2.0</span>",
                        "solution": "What is <span class='code'>float</span>?"
                    },
                    {
                        "value": 400,
                        "html": true,
                        "clue": "<span class='code'>fun (x, y) -> x + y</span>",
                        "solution": "What is <span class='code'>int * int -> int</span>?"
                    },
                    {
                        "value": 600,
                        "html": true,
                        "clue": "<span class='code'>fun x -> x :: [x]</span>",
                        "solution": "What is <span class='code'>'a -> 'a list</span>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "<span class='code'>(fun x y -> x * y) 2</span>",
                        "solution": "What is <span class='code'>int -> int</span>?"
                    },
                    {
                        "value": 1000,
                        "html": true,
                        "clue": "<span class='code'>List.filter (fun x -> x > 0)</span>",
                        "solution": "What is <span class='code'>int list -> int list</span>?"
                    }
                ]
            },
            {
                "category": "Define a Type",
                "clues": [
                    {
                        "value": 200,
                        "html": true,
                        "clue": "An ADT <span class='code'>season</span> for representing one of the four seasons.",
                        "solution": "What is <span class='code'>type season = Spring | Summer | Fall | Winter</span>?"
                    },
                    {
                        "value": 400,
                        "html": true,
                        "clue": "A type <span class='code'>time</span> for representing the current time (in hours and minutes).",
                        "solution": "What is <span class='code'>type time = {hour: int; minute: int}</span>?"
                    },
                    {
                        "value": 600,
                        "html": true,
                        "clue": "A type <span class='code'>shape</span> for representing either a circle with a radius or a rectangle with a width and height.",
                        "solution": "What is <ul class='code-lines'><li>type shape =</li><li>| Circle of int</li><li>| Rectangle of int * int</li></ul>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "A type <span class='code'>number</span> for representing either an integer or a floating point number.",
                        "solution": "What is <ul class='code-lines'><li>type number =</li><li>| Int of int</li><li>| Float of float</li></ul>?"
                    },
                    {
                        "value": 1000,
                        "html": true,
                        "clue": "A type <span class='code'>vote</span> for representing a vote in an election for Candidate A, Candidate B, or a write-in that could be any name.",
                        "solution": "What is <ul class='code-lines'><li>type vote =</li><li>| CandidateA</li><li>| CandidateB</li><li>| WriteIn of string</li></ul>?"
                    }
                ]
            },
            {
                "category": "Crossword Clues P",
                "clues": [
                    {
                        "value": 200,
                        "html": true,
                        "clue": "11 letters. A type of function that can take arguments of multiple different types.",
                        "solution": "What is polymorphic?"
                    },
                    {
                        "value": 400,
                        "html": true,
                        "clue": "4 letters. A way to describe a function with no side effects.",
                        "solution": "What is pure?"
                    },
                    {
                        "value": 600,
                        "html": true,
                        "clue": "Two words: 7 and 11 letters. Using a curried function on only some of its arguments, rather than all.",
                        "solution": "What is partial application?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "Two words: 9 and 12 letters. According to Donald Knuth, it is the root of all evil.",
                        "solution": "What is premature optimization?"
                    },
                    {
                        "value": 1000,
                        "html": true,
                        "clue": "10 letters. The edict of this says that illegal structures should be inexpressible. Modular programming can help us to achieve it.",
                        "solution": "What is prevention?"
                    }
                ]
            },
            {
                "category": "Find the Bug",
                "clues": [
                    {
                        "value": 200,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let f x y = x + y in</li><li>f 1.2 3.4 ;;</li></ul>",
                        "solution": "What is using <span class='code'>+</span> instead of <span class='code'>+.</span>?"
                    },
                    {
                        "value": 400,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let length lst =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match lst with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| [] -> 0</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| hd :: tl -> 1 + length tl</li><li>;;</li></ul>",
                        "solution": "What is a missing <span class='code'>rec</span>?"
                    },
                    {
                        "value": 600,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let rec sum lst =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match lst with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| [] -> 0</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| hd :: tl -> hd + sum lst</li></ul>",
                        "solution": "What is recursively calling on <span class='code'>lst</span> instead of <span class='code'>tl</span>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>List.filter (fun x -> x * 2) [1; 2; 3; 4; 5]</li></ul>",
                        "solution": "What is using a filter function that does not return a <span class='code'>bool</span>?"
                    },
                    {
                        "value": 1000,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let rec max_list lst =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match lst with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| [] -> None</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| hd :: tl -> Some (max hd (max_list tl)) ;;</li></ul>",
                        "solution": "What is comparing a <span class='code'>'a</span> with a <span class='code'>'a option</span>?"
                    }
                ]
            }
        ],
        "double": [
            {
                "category": "Find the Warning",
                "clues": [
                    {
                        "value": 400,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let fst pair =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match pair with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| x, y -> x</li><li>;;</li></ul>",
                        "solution": "What is unused variable?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let rec reverse (x, y) =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;(y, x)</li><li>;;</li></ul>",
                        "solution": "What is unused <span class='code'>rec</span>?"
                    },
                    {
                        "value": 1200,
                        "html": true,
                        "dailyDouble": true,
                        "clue": "<ul class='code-lines'><li>let sum_opt (x : int option) (y : int option) : int option =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match x, y with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| None, None -> None</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| Some x, Some y -> Some x + y</li><li>;;</li><li></li><li></li></ul>",
                        "solution": "What is inexhaustive pattern-matching?"
                    },
                    {
                        "value": 1600,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let rec length lst =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match lst with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| [] -> 0</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| _x -> 1</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| _hd :: tl -> 1 + length tl</li><li>;;</li></ul>",
                        "solution": "What is unused match case?"
                    },
                    {
                        "value": 2000,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>type season = Winter | Spring | Summer | Fall ;;</li><li>let season_number s =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match s with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| Winter -> 0</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| Spring -> 1</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| Summer -> 2</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| _ -> 3</li><li>;;</li></ul>",
                        "solution": "What is fragile pattern matching?"
                    }
                ]
            },
            {
                "category": "9 Letter Words",
                "clues": [
                    {
                        "value": 400,
                        "html": true,
                        "clue": "This type of function is one without a name.",
                        "solution": "What is anonymous?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "To hide implementation details behind an abstraction barrier, specify one of these for a module.",
                        "solution": "What is signature?"
                    },
                    {
                        "value": 1200,
                        "html": true,
                        "clue": "A statement you enforce about values in your representation that you can thus assume to be true is called this.",
                        "solution": "What is invariant?"
                    },
                    {
                        "value": 1600,
                        "html": true,
                        "clue": "Adding explicit typings to your functions can help to satisfy the edict of this.",
                        "solution": "What is intention?"
                    },
                    {
                        "value": 2000,
                        "html": true,
                        "clue": "To avoid the verbose extraction and reinjection of values into option types, this can also be used for handling anomalous conditions.",
                        "solution": "What is exception?"
                    }
                ]
            },
            {
                "category": "Map, Fold, and Filter",
                "clues": [
                    {
                        "value": 400,
                        "html": true,
                        "clue": "The type of <span class='code'>List.map (fun x -> x *. x)</span>",
                        "solution": "What is <span class='code'>float list -> float list</span>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "The value of <span class='code'>List.map (fun x -> x > 10) [5; 10; 15]</span>",
                        "solution": "What is <span class='code'>[false; false; true]</span>?"
                    },
                    {
                        "value": 1200,
                        "html": true,
                        "clue": "THe value of the following expression. <ul class='code-lines'><li>[(3, 2); (5, 1); (1, 9)]</li><li>|> List.filter (fun (x, y) -> x > y)</li><li>|> List.length</li></ul>",
                        "solution": "What is <span class='code'>2</span>?"
                    },
                    {
                        "value": 1600,
                        "html": true,
                        "clue": "The value of the following expression. <ul class='code-lines'><li>[1; 2; 3; 4; 5]</li><li>|> List.filter (fun x -> x > 2)</li><li>|> List.fold_left (+) 0</li></ul>",
                        "solution": "What is <span class='code'>12</span>?"
                    },
                    {
                        "value": 2000,
                        "html": true,
                        "clue": "The value of the following expression. <ul class='code-lines'><li>List.fold_left</li><li>&nbsp;&nbsp;&nbsp;&nbsp;(fun x y -> x ^ y ^ y)</li><li>&nbsp;&nbsp;&nbsp;&nbsp;\"\"</li><li>&nbsp;&nbsp;&nbsp;&nbsp;[\"a\"; \"b\"; \"c\"; \"d\"; \"e\"]</li></ul>",
                        "solution": "What is <span class='code'>\"aabbccddee\"</span>?"
                    }
                ]
            },
            {
                "category": "Write the Function",
                "clues": [
                    {
                        "value": 400,
                        "html": true,
                        "clue": "A function that takes an integer and returns the integer 51 greater than it.",
                        "solution": "What is <span class='code'>(+) 51</span>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "A recursive function to compute the factorial of a non-negative integer.",
                        "solution": "What is <ul class='code-lines'><li>let rec f x =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;if x = 0 then 1</li><li>&nbsp;&nbsp;&nbsp;&nbsp;else x * f (x - 1)</li><li>;;</li></ul>?"
                    },
                    {
                        "value": 1200,
                        "html": true,
                        "clue": "A function that optionally returns the head of a list if the list has a head. The function returns <span class='code'>None</span> if the list has no head.",
                        "solution": "What is <ul class='code-lines'><li>let f lst =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match lst with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| [] -> None</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| hd :: _tl -> Some hd</li><li>;;</li></ul>?"
                    },
                    {
                        "value": 1600,
                        "html": true,
                        "dailyDouble": true,
                        "clue": "Without using the list module, a function that accepts a list of integers and returns a list of integers with each element incremented by 1.",
                        "solution": "What is <ul class='code-lines'><li>let rec f lst =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match lst with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| [] -> []</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| hd :: tl -> (hd + 1) :: f tl</li><li>;;</li></ul>?"
                    },
                    {
                        "value": 2000,
                        "html": true,
                        "clue": "Using a single call to a <span class='code'>List</span> module function, a function that accepts a list of integers and returns the list reversed.",
                        "solution": "What is <span class='code'>List.fold_left (fun acc elt -> elt :: acc) []</span>?"
                    }
                ]
            },
            {
                "category": "Famous Computer Scientists",
                "clues": [
                    {
                        "value": 400,
                        "html": true,
                        "clue": "Writing functions that take arguments one at a time, instead of taking multiple arguments simultaneously, was popularized by this computer scientist.",
                        "solution": "Who is Haskell Curry?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "Robin Milner developed the ML programming language, the first functional language with this: the ability to automatically detect the data type of a programming expression.",
                        "solution": "What is type inference?"
                    },
                    {
                        "value": 1200,
                        "html": true,
                        "clue": "Turing Award winner Barbara Liskov is known for her work with hiding the implementation of an abstract data type's functionality behind what's commonly known as this -- don't cross it!",
                        "solution": "What is the abstraction barrier?"
                    },
                    {
                        "value": 1600,
                        "html": true,
                        "clue": "Marianne Baudinet is known for her work on this feature of ML-style languages, which allows us to extract the parts from a composite value (especially helpful if the value can take multiple forms).",
                        "solution": "What is pattern matching?"
                    },
                    {
                        "value": 2000,
                        "html": true,
                        "clue": "Alonzo Church is known for the development of this logical system that includes only functions and their applications, serving as the mathematical precursor to languages like OCaml.",
                        "solution": "What is the lambda calculus?"
                    }
                ]
            },
            {
                "category": "Modules",
                "clues": [
                    {
                        "value": 400,
                        "html": true,
                        "clue": "The keyword <span class='code'>module</span> is used for introducing the name of a module. The keywords <span class='code'>module type</span> are used to introduce the name of this part of a module.",
                        "solution": "What is a module signature?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "These constructs in OCaml accept modules as arguments, and return new modules.",
                        "solution": "What are functors?"
                    },
                    {
                        "value": 1200,
                        "html": true,
                        "clue": "Fill in the blank in this module definition. <ul class='code-lines'><li>module Stack =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;struct</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type int_stack = int list</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let empty_stack : int_stack = []</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let push elt s : int_stack = ______</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let pop q : int * int_stack =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match q with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| [] -> raise (Invalid_argument \"empty\")</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| hd :: tl -> hd, tl</li><li>&nbsp;&nbsp;&nbsp;&nbsp;end ;;</li></ul>",
                        "solution": "What is <span class='code'>elt :: s</span>?"
                    },
                    {
                        "value": 1600,
                        "html": true,
                        "clue": "When a module signature enforces an abstraction barrier that is too strict, these can be used to define slightly less abstract signatures.",
                        "solution": "What are sharing constraints?"
                    },
                    {
                        "value": 2000,
                        "html": true,
                        "clue": "The following function successfully finds the number of elements in an integer stack, but is problematic for this reason. <ul class='code-lines'><li>let rec size (s : int_stack) =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match s with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| [] -> 0</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| hd :: tl -> 1 + size tl ;;</li></ul>",
                        "solution": "What is breaking the abstraction barrier?"
                    }
                ]
            }
        ],
        "final": {
            "category": "Option Types",
            "html": true,
            "clue": "The type of the following function. <ul class='code-lines'><li>let f x =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match x with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| None</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| Some _ -> Some x</li></ul>",
            "solution": "What is <div class='code'>'a option -> 'a option option</div>?"
        }
    }
}
